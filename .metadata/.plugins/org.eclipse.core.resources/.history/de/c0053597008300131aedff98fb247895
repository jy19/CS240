package spell;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

public class SpellCorrectorObj implements SpellCorrector{
	
	TrieObj trie = new TrieObj();
	Set<String> edit1 = new TreeSet<String>();

	public void useDictionary(String dictionaryFileName) throws FileNotFoundException {
		String word;
		File inputFile = new File(dictionaryFileName);
		Scanner scan = new Scanner(inputFile);
		while(scan.hasNext()){
			word = scan.next().toLowerCase();
			trie.add(word);
		}
		//System.out.print(trie.toString());
		scan.close();
	}

	public String suggestSimilarWord(String inputWord) {
		if(trie.find(inputWord) != null){
			return inputWord;
		}
		else{
			insertion(inputWord);
			deletion(inputWord);
			transposition(inputWord);
			alteration(inputWord);
		}
		return null;
	}
	
	public void insertion(String word){
		//String suggestion;
		for(int i = 0; i < word.length() + 1; i++){
			for(char c = 'a'; c <= 'z'; c++){
				StringBuilder sb = new StringBuilder(word);
				sb.insert(c, i);
				String sbword = sb.toString();
				edit1.add(sbword);
			}
		}
	}
	
	public void deletion(String word){
		for(int i = 0; i < word.length(); i++){
			StringBuilder sb = new StringBuilder(word);
			sb.deleteCharAt(i);
			String sbword = sb.toString();
			edit1.add(sbword);
		}
	}
	
	public void transposition(String word){
		char[] c = word.toCharArray();
		for (int i = 0; i < word.length()-1; i++){
			char temp = c[i];
			c[i] = c[i+1];
			c[i+1] = temp;
			String transposed = new String(c);
			edit1.add(transposed);
		}
	}
	
	public void alteration(String word){
		char[] alterString = word.toCharArray();
		for(int i = 0; i < word.length(); i++){
			for(char c = 'a'; c <= 'z'; c++){
				alterString[i] = c;
				String altered = new String(alterString);
				edit1.add(altered);
			}
		}
	}

}
